<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>io on yuler&#39;s blog</title>
    <link>https://yuler.asia/tags/io/</link>
    <description>Recent content in io on yuler&#39;s blog</description>
    <image>
      <url>https://yuler.asia/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yuler.asia/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Jul 2021 03:02:56 +0000</lastBuildDate><atom:link href="https://yuler.asia/tags/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解io多路复用</title>
      <link>https://yuler.asia/topics/misc/%E7%90%86%E8%A7%A3io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.html</link>
      <pubDate>Sat, 03 Jul 2021 03:02:56 +0000</pubDate>
      
      <guid>https://yuler.asia/topics/misc/%E7%90%86%E8%A7%A3io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.html</guid>
      <description>之前对io多路复用有诸多疑惑，看了很多文章还是不甚了解——它是什么，它要解决什么问题。最近刚好需要分析golang网络轮询器，趁此机会，把io多路复用的相关内容都总结记录一下。
为什么需要io多路复用模型? 当我们开启一个socket的时候，需要对发起的连接进行响应。
阻塞io 阻塞io流程如图
如果使用阻塞io，我们可能会有下面类似的代码框架。
在accept()建立起连接后，我们会使用多线程来接手连接套接字connfd，阻塞的读取客户端发送来的内容。
 每个连接都要开启一个线程来阻塞读取数据，但大多数线程都处于阻塞状态，造成了严重的线程浪费  非阻塞io 非阻塞io流程如图
如果使用非阻塞io，我们可能会有下面类似的代码框架
将建立的连接放到数组中，然后进行轮询，当有能够读取到消息的时候，再开启新的线程进一步处理。
 轮询时使用系统调用read，导致用户态和内核态的频繁切换  io多路复用 考虑到上述两种io模型的缺点，提出了io多路复用，使用一个线程监听多个fd，同时又能减少系统调用的次数。
io多路复用包括三种模型select, poll和epoll。
select selet流程如图
select的思路是，将监听的fd数组从用户空间拷贝到内核空间，由内核负责遍历fd数组，确定哪些fd是可读写的，然后再将可读写的fd进行标记，拷贝标记数组到用户空间，并返回总的可读写的数量。再由用户进行遍历标记数组，处理相应的fd。
select由以下的问题：
 fd数组的大小有限制，最大为1024 fd数组从用户空间到内核空间的频繁拷贝 用户还是需要根据返回的可读fd大小，对标记数组进行遍历，判断具体可操作的fd是哪个  poll poll使用链表代替了数组，解决了最大监听数1024的限制，但频繁拷贝和遍历问题仍未得到解决
epoll 针对select的三个问题，epoll进行了改进
 可监控的fd数量没有限制 数据结构位于内核中，无需用户每次从用户空间拷贝，只需要告诉内核需要修改的部分即可。 内核只会将有io事件的fd返回给用户，避免了多余的遍历操作。  用户把需要监听的io事件添加到内核空间的红黑树中，对于每一个事件都会通过回调函数与网卡驱动建立回调关系，当相应的事件发生时，就会调用回调函数，通过回调函数把发生的事件添加到事件队列，当通过epoll_wait()检查是否有事件发生时，只需要检查队列是否为空即可，如果不为空，就把队列中的内容复制到用户态，同时将事件数量返回给用户。
epoll还是用了共享内存加速了用户空间和内核空间的消息传递。
epoll有LT(level trigger)和ET(edge trigger)两种模式：
 水平触发(LT)：只要fd的事件还未处理（比如数据还没有读），每次epoll_wait都会返回该事件，提醒用户处理 边缘触发(ET): 当epoll_wait检测到事件并通知用户时，用户必须立马处理，否则下次也不会通知该事件。  该术语使用了脉冲信号相关的属于，很形象的表达了它们的功能。水平触发就是水平信号，只要事件不处理，就会一直发送该信号。边缘触发就是上升沿和下降沿，事件只会通知一次。
总结 &amp;lt;th style=&amp;quot;text-align: center;&amp;quot;&amp;gt; select &amp;lt;/th&amp;gt; &amp;lt;th style=&amp;quot;text-align: center;&amp;quot;&amp;gt; poll &amp;lt;/th&amp;gt; &amp;lt;th style=&amp;quot;text-align: center;&amp;quot;&amp;gt; epoll &amp;lt;/th&amp;gt;  &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 遍历 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 遍历 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 回调 &amp;lt;/td&amp;gt;  &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 数组 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 链表 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 红黑树 &amp;lt;/td&amp;gt;  &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; O(n) &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; O(n) &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; O(1) &amp;lt;/td&amp;gt;  &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 1024 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 无上限 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 无上限 &amp;lt;/td&amp;gt;  &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 每次拷贝所有数据 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 每次拷贝所有数据 &amp;lt;/td&amp;gt; &amp;lt;td style=&amp;quot;text-align: center;&amp;quot;&amp;gt; 拷贝相应的增删改操作 &amp;lt;/td&amp;gt;  References 1.</description>
    </item>
    
  </channel>
</rss>

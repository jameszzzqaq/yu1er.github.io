<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>schedule on yuler&#39;s blog</title>
    <link>https://zhangyh.me/tags/schedule/</link>
    <description>Recent content in schedule on yuler&#39;s blog</description>
    <image>
      <url>https://zhangyh.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zhangyh.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Jul 2021 16:45:55 +0000</lastBuildDate><atom:link href="https://zhangyh.me/tags/schedule/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go调度 | 4. 调度策略</title>
      <link>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-4-%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5.html</link>
      <pubDate>Thu, 01 Jul 2021 16:45:55 +0000</pubDate>
      
      <guid>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-4-%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5.html</guid>
      <description>【go调度】4. 调度策略 前文分析了scheduler的初始化以及goroutine创建和执行，略过了调度策略的内容。
有关调度策略的部分主要位于调度函数schedule()中，本文将具体分析。
schedule() func schedule() { _g_ := getg() top: var gp *g .... // 全局队列  if gp == nil { // 为了公平起见，每调度61次，就去全局队列优先获取goroutine  // 避免两个本地队列中的goroutine循环调度,导致全局队列中的goroutine得不到运行  if _g_.m.p.ptr().schedtick%61 == 0 &amp;amp;&amp;amp; sched.runqsize &amp;gt; 0 { lock(&amp;amp;sched.lock) gp = globrunqget(_g_.m.p.ptr(), 1) unlock(&amp;amp;sched.lock) } } // 本地队列  if gp == nil { // 从本地队列优先获取goroutine  gp, inheritTime = runqget(_g_.m.p.ptr()) } // 本地和全局都没有获取到goroutine，就需要从其他的p本地队列中偷取  // 如果偷取不到当前线程会block，知道返回可用的goroutine  if gp == nil { gp, inheritTime = findrunnable() // blocks until work is available  } .</description>
    </item>
    
    <item>
      <title>Go调度 | 3. goroutine的创建和执行</title>
      <link>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-3-goroutine%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E6%89%A7%E8%A1%8C.html</link>
      <pubDate>Thu, 01 Jul 2021 04:36:30 +0000</pubDate>
      
      <guid>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-3-goroutine%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E6%89%A7%E8%A1%8C.html</guid>
      <description>【go调度】3. goroutine的创建和执行 参考上篇文章对文章对程序启动过程的分析，这里仍旧沿着上次分析的思路来分析main gorotine的创建和调度过程。
go程序的启动 TEXT runtime·rt0_go&amp;lt;ABIInternal&amp;gt;(SB),NOSPLIT,$0 .... // 初始化系统核心, 获取CPU的核数并放在global变量ncpu中  CALL	runtime·osinit(SB) // 初始化schedule  CALL	runtime·schedinit(SB) MOVQ	$runtime·mainPC(SB), AX	// entry  PUSHQ	AX PUSHQ	$0	// arg size  // 创建新的goroutine来执行程序(main()函数)  CALL	runtime·newproc(SB) POPQ	AX POPQ	AX // 主线程进入调度循环，运行刚刚创建的 goroutine  CALL	runtime·mstart(SB) // mstart是不会返回的，如果返回，终止程序  CALL	runtime·abort(SB)	// mstart should never return  RET main goroutine newproc() 该函数创建出main goroutine
func newproc(siz int32, fn *funcval) { argp := add(unsafe.</description>
    </item>
    
    <item>
      <title>Go调度 | 2. scheduler初始化</title>
      <link>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-2-scheduler%E5%88%9D%E5%A7%8B%E5%8C%96.html</link>
      <pubDate>Wed, 30 Jun 2021 10:51:39 +0000</pubDate>
      
      <guid>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-2-scheduler%E5%88%9D%E5%A7%8B%E5%8C%96.html</guid>
      <description>上篇文章结尾告诉我们了几个重要的全局变量，本篇文章会用到
allm *m // 所有的m构成的一个链表，包括下面的m0 allp []*p // 保存所有的p，len(allp) == gomaxprocs  ncpu int32 // 系统中cpu核的数量，程序启动时由runtime代码初始化 gomaxprocs int32 // p的最大值，默认等于ncpu，但可以通过GOMAXPROCS修改  m0 m // 代表进程的主线程 g0 g // m0的g0，也就是m0.g0 = &amp;amp;g0 go程序的启动 当我们运行一个main()函数来启动整个go程序的时候，他的启动流程是什么，这里我们从源码方面仔细分析下整个流程。
对于linux下的程序来说，入口文件在runtime/rt0_linux_amd64.s，
 具体我们是如何判断入口文件的，可以参考这篇文章，文章简单易懂
 TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8 JMP	_rt0_amd64(SB) 跳转到runtime/asm_amd64.s文件的_rt0_amd64(SB)函数
// 操作系统内核传递过来的参数argc和argv数组的地址分别放在DI和SI寄存器中 // 然后跳转到 rt0_go 去执行 TEXT _rt0_amd64(SB),NOSPLIT,$-8 MOVQ	0(SP), DI	// argc 	LEAQ	8(SP), SI	// argv 	JMP	runtime·rt0_go(SB) 跳转到runtime·rt0_go函数，我们保留该函数的主要流程
TEXT runtime·rt0_go&amp;lt;ABIInternal&amp;gt;(SB),NOSPLIT,$0 // 拷贝argc和argv到指定位置  MOVQ	DI, AX	// argc  MOVQ	SI, BX	// argv  SUBQ	$(4*8+7), SP	// 2args 2auto  ANDQ	$~15, SP MOVQ	AX, 16(SP) MOVQ	BX, 24(SP) // 为g0分配栈空间，g0的栈一般相对较大  // 之后会专门写一篇分析g0的文章  MOVQ	$runtime·g0(SB), DI LEAQ	(-64*1024+104)(SP), BX MOVQ	BX, g_stackguard0(DI) MOVQ	BX, g_stackguard1(DI) MOVQ	BX, (g_stack+stack_lo)(DI) MOVQ	SP, (g_stack+stack_hi)(DI) // .</description>
    </item>
    
    <item>
      <title>GMP源码分析</title>
      <link>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-gmp%E6%A8%A1%E5%9E%8B.html</link>
      <pubDate>Wed, 30 Jun 2021 08:56:43 +0000</pubDate>
      
      <guid>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-gmp%E6%A8%A1%E5%9E%8B.html</guid>
      <description>准备写一个有关go schedule系列的文章，目前已经有很多这方面的内容，但为了记录学习过程和未来复习，我还是决定亲自输出写东西。 该系列预期包括以下内容：
 GMP模型 scheduler的初始化 main goroutine和非main goroutine的启动和结束 如何调度 &amp;ndash; 全局队列，局部队列，working-stealing 何时调度 &amp;ndash;被动，主动，抢占式  创建go routine start=&amp;gt;start: 开始op1=&amp;gt;operation: 获取go func()的func和argsop2=&amp;gt;operation: 切换至g0，使用g0创建对应的Gop3=&amp;gt;operation: gfget(p) 从当前的P获取空闲G;op4=&amp;gt;operation: 参数复制到G,清除堆,pc:func,sp:goexit1op5=&amp;gt;operation: runqput(p,newg,true); 将G加入P的runnable数组;end=&amp;gt;end: 结束start-&amp;gt;op1op1-&amp;gt;op2op2-&amp;gt;op3op3-&amp;gt;op4op4-&amp;gt;op5op5-&amp;gt;end创建P References  Go 语言调度器与 Goroutine 实现原理 | Go 语言设计与实现 golang 源码学习之GMP (goroutine) - 简书 go/runtime2.go at master · golang/go [译]Go 调度器: M, P 和 G | 鸟窝 Golang调度器源码分析 Golang的协程调度器原理及GMP设计思想？ · Golang修养之路 · 看云 Golang源码探索(二) 协程的实现原理 - q303248153 - 博客园  </description>
    </item>
    
    <item>
      <title>Go调度 | 1. GMP模型</title>
      <link>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-gmp%E6%A8%A1%E5%9E%8B.html</link>
      <pubDate>Wed, 30 Jun 2021 08:56:43 +0000</pubDate>
      
      <guid>https://zhangyh.me/topics/golang/go%E8%B0%83%E5%BA%A6-gmp%E6%A8%A1%E5%9E%8B.html</guid>
      <description>本节深入先从宏观上介绍GMP模型，然后再通过源码进行深入了解。
线程和协程 协程是用户态的线程，他的管理和调度都是在用户态进行的，协程与线程相比有以下的优势：
 内存占用 线程内存占用约为4MB，且大小固定。协程内存占用约为2KB，并且是弹性可拓展的。 线程的内存分配往往一方面会造成内存的浪费，另一方面也会有栈溢出的风险。 创建和切换 线程的创建和切换都需要在内核态进行，并且线程切换时有很多寄存器需要进行现场保护。 而协程的创建和切换都是用户态的，并且线程保护的内容相对较少  GMP模型  G: goroutine协程,即我们定义的 go func(){} P: processor处理器，是一种抽象的、用于G执行的局部资源 M: machine，也即thread，对应实际的内核线程
 GMP结构 这部分主要从源码层面分析GMP的结构
G结构 我们暂时忽略一些对我们分析没有影响的字段。
type g struct { stack stack // goroutine 使用的栈[stack.lo, stack.hi] 	stackguard0 uintptr stackguard1 uintptr // 用于栈空间的动态变化  m *m // 与当前g绑定的m  sched gobuf // goroutine的运行线程，主要为寄存器信息 	param unsafe.Pointer // warkup 唤醒时传递的参数 	atomicstatus uint32 // goroutine的状态 	goid int64 // goroutine id 	schedlink guintptr // 指向全局goroutine队列中的的下一个  // go阻塞的时间和原因 	waitsince int64 // approx time when the g become blocked 	waitreason waitReason // if status==Gwaiting  // 抢占调度相关 	preempt bool // preemption signal, duplicates stackguard0 = stackpreempt 	preemptStop bool // transition to _Gpreempted on preemption; otherwise, just deschedule 	preemptShrink bool // shrink stack at synchronous safe point } 其中atomicstatus存储了goroutine的状态，这里列举一些重要的状态</description>
    </item>
    
  </channel>
</rss>

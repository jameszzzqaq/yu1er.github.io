<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cpp on yuler&#39;s blog</title>
    <link>https://blog.zhangyh.me/categories/cpp/</link>
    <description>Recent content in cpp on yuler&#39;s blog</description>
    <image>
      <url>https://blog.zhangyh.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.zhangyh.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 10 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zhangyh.me/categories/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cpp问题清单</title>
      <link>https://blog.zhangyh.me/posts/cpp/problem-list/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhangyh.me/posts/cpp/problem-list/</guid>
      <description>问题1 #include &amp;lt;iostream&amp;gt; class A { public:  virtual void func(int val = 1) {std::cout &amp;lt;&amp;lt; &amp;#34;A-&amp;gt;&amp;#34; &amp;lt;&amp;lt; val &amp;lt;&amp;lt; std::endl; }  virtual void test(){func();} };  class B : public A { public:  void func(int val = 0) {std::cout &amp;lt;&amp;lt; &amp;#34;B-&amp;gt;&amp;#34; &amp;lt;&amp;lt; val &amp;lt;&amp;lt; std::endl;} };   int main () {  B* b = new B;  b-&amp;gt;test();  return 0; } 输出  B-&amp;gt;1</description>
    </item>
    
    <item>
      <title>priority_queue自定义排序</title>
      <link>https://blog.zhangyh.me/posts/cpp/priority-queue-custom-comparator/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhangyh.me/posts/cpp/priority-queue-custom-comparator/</guid>
      <description>给定一个pair&amp;lt;int, int&amp;gt;数组,通过自定义排序顺序决定优先队列中的顺序.
vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; nums{{4, 1}, {8, 2}, {1, 9}, {8, 1}, {8, 4}, {3, 7}}; 仿函数 (推荐) 仿函数的出现就是为了解决函数指针在作为函数参数向函数传递时的局限性问题. 通过重写类的operator(),使该类具有函数的功能.
struct cmp {  bool operator() (const pair&amp;lt;int, int&amp;gt; &amp;amp;a, const pair&amp;lt;int, int&amp;gt; &amp;amp;b) {  return a.first == b.first? a.second &amp;lt; b.second : a.first &amp;lt; b.first;  } }; priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;, cmp&amp;gt; pq; lambda 通过c++11新特性的lambda和delctype,可以避免重新定义类. 但需要注意,lambda函数需要通过构造函数的参数传递.
auto a = [](const pair&amp;lt;int, int&amp;gt; &amp;amp; a, const pair&amp;lt;int, int&amp;gt; &amp;amp;b){  return a.</description>
    </item>
    
  </channel>
</rss>
